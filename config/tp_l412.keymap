#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

#define BASE 0
#define BASE_DVR 1
#define WEB_NAV 2
#define NUMPAD 3
#define FUNCTION 4

#define MOUSE_TP 5
#define MOUSE_TP_SET 6

/*
 * Defines to enable/disable features
 *
 * These defines allow us to conditionally enable and disable parts of the keymap config.
 *
 * For example, if we decide to build the firmware without the mouse features, we can
 * disable all the config options that rely on those forks and modules without having
 * to edit the entire keymap file manually every time.
 */

#define HAS_MOUSE_TP

#ifdef HAS_MOUSE_TP
  // We store the trackpoint settings in a separate file
  // to make organization a little easier.
  #include "include/mouse_tp.dtsi"
#endif  // HAS_MOUSE_TP

// Adjust layer keys based on enabled features.
//
// This prevents build errors when we build the firmware
// without the TP module.

#ifdef HAS_MOUSE_TP
  #define U_TOG_TP_SET &tog MOUSE_TP_SET
#else
  #define U_TOG_TP_SET &none
#endif  // HAS_MOUSE_TP

/ {
    behaviors {
        td_num: td_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NUM";
            #binding-cells = <0>;
            bindings = <&tog 3>, <&kp KP_NUMLOCK>;
        };

        td_layout: td_layout {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYOUT";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // --------------------------------------------------------------------------------------------------
        // |  ESC  | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10 | F11 | F12 | INS | DEL | HOME | END  |
        // |   `   |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |     BKSP       |
        // |  TAB     |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |     \       |
        // |  LCTRL    |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |      ENTER       |
        // |  SHIFT       |  Z  |  X  |  C  |  V   |  B  |  N  |  M  |  ,  |  .  |  /  |        RSHFT       |
        // | FN | LCTRL | LGUI | LALT |             SPACE            | RALT | FN | RCTRL | PGUP | UP | PGDN |
        // ---------------------------| MS_LEFT |  MS_MID | MS_RIGHT |-------------------| LEFT | DN | RGHT |
        // --------------------------------------------------------------------------------------------------

        default_layer {
            display-name = "BASE";
            bindings = <
&kp ESC    &kp F1     &kp F2    &kp F3    &kp F4     &kp F5     &kp F6     &kp F7  &kp F8     &kp F9    &kp F10    &kp F11    &kp F12    &kp INS    &kp DEL   &kp HOME &kp END    
&kp GRAVE  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6  &kp N7     &kp N8    &kp N9     &kp N0     &kp MINUS  &kp EQUAL  &kp BSPC
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T      &kp Y      &kp U   &kp I      &kp O     &kp P      &kp LBKT   &kp RBKT   &kp BSLH
&kp CAPS   &kp A      &kp S     &kp D     &kp F      &kp G      &kp H      &kp J   &kp K      &kp L     &kp SEMI   &kp SQT    &kp RET
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B      &kp N      &kp M   &kp COMMA  &kp DOT   &kp SLASH  &kp RSHFT
&mo 4      &kp LCTRL  &kp LGUI  &kp LALT  &kp SPACE                                &kp RALT   &kp RGUI  &kp RCTRL  &kp PG_UP  &kp UP     &kp PG_DN
                                          &mkp LCLK  &mkp MCLK  &mkp RCLK                                          &kp LEFT   &kp DOWN   &kp RIGHT
            >;
        };

        dvorak_right {
            display-name = "BASE_DVR";
            bindings = <
&kp ESC    &kp F1     &kp F2    &kp F3    &kp F4     &kp F5     &kp F6     &kp F7  &kp F8    &kp F9    &kp F10    &kp F11    &kp F12    &kp INS    &kp DEL   &kp HOME &kp END    
&kp GRAVE  &kp N1     &kp N2    &kp N3    &kp N4     &kp J      &kp L      &kp M   &kp F     &kp P     &kp FSLH   &kp LBKT   &kp RBKT   &kp BSPC
&kp TAB    &kp N5     &kp N6    &kp Q     &kp DOT    &kp O      &kp R      &kp S   &kp U     &kp Y     &kp B      &kp SEMI   &kp EQUAL  &kp BSLH
&kp CAPS   &kp N7     &kp N8    &kp Z     &kp A      &kp E      &kp H      &kp T   &kp D     &kp C     &kp K      &kp MINUS  &kp RET
&kp LSHFT  &kp N9     &kp N0    &kp X     &kp COMMA  &kp I      &kp N      &kp W   &kp V     &kp G     &kp SQT    &kp RSHFT
&mo 4      &kp LCTRL  &kp LGUI  &kp LALT  &kp SPACE                                &kp RALT  &kp RGUI  &kp RCTRL  &kp PG_UP  &kp UP     &kp PG_DN
                                          &mkp LCLK  &mkp MCLK  &mkp RCLK                                         &kp LEFT   &kp DOWN   &kp RIGHT
            >;
        };

        web_nav_layer {
            display-name = "WEB_NAV";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans           &trans  &trans &trans  
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &mkp MB4        &msc SCRL_UP    &mkp MB5
                                &trans  &trans  &trans                                  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT
            >;

        };

        numpad_layer {
            display-name = "NUMPAD";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans     &trans    &trans  &trans  &trans  &trans &trans  
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N7  &kp N8  &kp N9   &kp FSLH   &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6   &kp STAR   &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3   &kp MINUS  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N0  &trans  &kp DOT  &kp PLUS   &trans
&trans  &trans  &trans  &trans  &trans                          &trans  &trans   &trans     &trans    &trans  &trans
                                &trans  &trans  &trans                                      &trans    &trans  &trans
            >;

        };

        function_layer {
            display-name = "FUNCTION";
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &tog 2  &td_num  &kp PAUSE_BREAK  &out OUT_TOG  &kp PSCRN   &kp C_BRI_DN  &kp C_BRI_UP &trans  
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans   &trans           &trans        &trans
&trans      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans   &trans           &trans        &trans
&trans      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans   &trans           &trans
&trans      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans      &trans        &trans        &trans        &td_layout                            &trans  &trans  &trans   &mkp MB4         &kp C_STOP   &mkp MB5
                                                      &trans        &trans  &trans                                   &kp C_PREV       &kp C_PP     &kp C_NEXT
            >;

        };

        #ifdef HAS_MOUSE_TP

        // Automatically activated when the mouse or trackpoint moves.
        // Configured in `include/mouse_tp.dtsi`.
        MouseTP_layer {
            display-name = "TP";
            bindings = <
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans &trans        
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
U_TOG_TP_SET  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans  &trans  &trans                                  &trans  &trans  &trans
            >;
        };

        // You can find the defines for the actual key press behaviors in `include/mouse_tp.dtsi`.
        MouseSettings_layer {
            display-name = "TP Set";
            bindings = <
U_MSS_RESET   &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans &trans        
U_MSS_LOG     U_MSS_TP_S_D   U_MSS_TP_S_I   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans        U_MSS_TP_NI_D  U_MSS_TP_NI_I  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        U_MSS_TP_V6_D  U_MSS_TP_V6_I  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        U_MSS_TP_PT_D  U_MSS_TP_PT_I  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
U_TOG_TP_SET  &trans         &trans         &trans  &trans                          &trans  &trans  &trans  &trans  &trans  &trans
                                                    &trans  &trans  &trans                                  &trans  &trans  &trans   
            >;
        };

    #endif

    };
};
